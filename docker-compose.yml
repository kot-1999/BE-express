services:
  app:
    image: node:22.8.0
    profiles:
      - dev
      - test
    container_name: app
    ports:
      - ${PORT}:${PORT}
    volumes:
      - ./:/usr/src/app
    working_dir: /usr/src/app
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_URL=${POSTGRES_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - COOKIE_SECRET_KEY=${COOKIE_SECRET_KEY}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_HOST=${EMAIL_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SENTRY_DNS=${SENTRY_DNS}
    depends_on:
      - mailhog
      - redis
      - postgres_test
    command: >
      sh -c '
        apt-get update && apt-get install -y netcat-openbsd;
        echo "Waiting for PostgreSQL to be ready...";
              until ncat -z postgres_test ${POSTGRES_PORT}; do
                sleep 1;
              done;
              echo "PostgreSQL is up!";
        npm install --legacy-peer-deps &&
        if [ "$NODE_ENV" = "test" ]; then
          npx prisma db push;
          npm run test;
        else
          npm run start;
        fi
      '

  postgres:
    image: postgres:17.2
    profiles:
      - dev
    shm_size: 1gb
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./docker/local/postgres/pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGPORT=${POSTGRES_PORT}
    restart: always

  postgres_test:
    image: postgres:17.2
    profiles:
      - test
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGPORT=${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 1s
      retries: 30
    restart: always

  mailhog:
    image: mailhog/mailhog
    profiles:
      - dev
      - test
    container_name: mailhog
    ports:
      - ${EMAIL_SMTP_PORT}:${EMAIL_SMTP_PORT}  # SMTP port for sending emails
      - ${EMAIL_HTTP_PORT}:${EMAIL_HTTP_PORT}  # HTTP interface for viewing emails
    environment:
      - MH_STORAGE=memory
      - MH_SMTP_AUTH=true  # Enable SMTP authentication
      - MH_SMTP_USER=${EMAIL_USER}  # Set the SMTP username
      - MH_SMTP_PASSWORD=${EMAIL_PASSWORD}
  redis:
    image: redis:7.4
    container_name: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --port ${REDIS_PORT}
      --maxmemory 256mb
    restart: always