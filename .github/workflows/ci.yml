name: CI/CD Pipeline

on:
  push:  # Runs on push to any branch
    branches:
      - '**'
  pull_request:  # Runs on all PRs before merging
    branches:
      - '**'


jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ENV_TEST
    env:
      NODE_ENV: "${{ vars.NODE_ENV }}"
      PORT: "${{ vars.PORT }}"
      ENCRYPTION_KEY: "${{ secrets.ENCRYPTION_KEY }}"
      COOKIE_SECRET_KEY: "${{ secrets.COOKIE_SECRET_KEY }}"
      JWT_SECRET: "${{ secrets.JWT_SECRET }}"
      JWT_EXPIRES_IN: "${{ secrets.JWT_EXPIRES_IN }}"
      POSTGRES_URL: "${{ secrets.POSTGRES_URL }}"
      POSTGRES_PORT: "${{ secrets.POSTGRES_PORT }}"
      POSTGRES_USER: "${{ secrets.POSTGRES_USER }}"
      POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
      POSTGRES_DB: "${{ secrets.POSTGRES_DB }}"
      GOOGLE_CLIENT_ID: "${{ secrets.GOOGLE_CLIENT_ID }}"
      GOOGLE_CLIENT_SECRET: "${{ secrets.GOOGLE_CLIENT_SECRET }}"
      EMAIL_HOST: "${{ secrets.EMAIL_HOST }}"
      EMAIL_SMTP_PORT: "${{ secrets.EMAIL_SMTP_PORT }}"
      EMAIL_HTTP_PORT: "${{ secrets.EMAIL_HTTP_PORT }}"
      EMAIL_USER: "${{ secrets.EMAIL_USER }}"
      EMAIL_PASSWORD: "${{ secrets.EMAIL_PASSWORD }}"
      EMAIL_FROM_ADDRESS: "${{ secrets.EMAIL_FROM_ADDRESS }}"
      REDIS_PORT: "${{ secrets.REDIS_PORT }}"
      REDIS_HOST: "${{ secrets.REDIS_HOST }}"
      REDIS_PASSWORD: "${{ secrets.REDIS_PASSWORD }}"
      REDIS_MAX_MEMORY: "${{ secrets.REDIS_MAX_MEMORY }}"
      SENTRY_DNS: "${{ secrets.SENTRY_DNS }}"
    steps:
      # Clone repository into the GitHub Actions runner
      - name: Checkout Repository
        uses: actions/checkout@v4
      # Print the contents of .env.test for debugging
      - name: Print .env
        run: cat .env
#      # Buildx is an advanced Docker builder that supports multi-platform builds and caching
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2

      - name: Run Tests
        run:
          docker compose --env-file .env --profile test up -d
          docker ps -a
          docker attach test_app
      # Attach current terminal to app container
      - name: Attach terminal to app container
        run: docker attach app

      - name: Wait for Tests to Finish
        run: |
          docker wait app

      - name: Stop and Clean Up
        run: docker compose down
