name: CI/CD Pipeline

on:
  push:  # Runs on push to any branch
    branches:
      - '**'
  pull_request:  # Runs on all PRs before merging
    branches:
      - '**'


jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    steps:
      # Clone repository into the GitHub Actions runner
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Write the secret to .env.test
      - name: Write env variables to file
        run: |
          echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env.test
          echo "PORT=${{ vars.PORT }}" >> .env.test
          echo "ENCRYPTION_KEY=${{ vars.ENCRYPTION_KEY }}" >> .env.test
          echo "COOKIE_SECRET_KEY=${{ vars.COOKIE_SECRET_KEY }}" >> .env.test
          echo "JWT_SECRET=${{ vars.JWT_SECRET }}" >> .env.test
          echo "JWT_EXPIRES_IN=${{ vars.JWT_EXPIRES_IN }}" >> .env.test
          echo "POSTGRES_URL=${{ vars.POSTGRES_URL }}" >> .env.test
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> .env.test
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> .env.test
          echo "POSTGRES_PASSWORD=${{ vars.POSTGRES_PASSWORD }}" >> .env.test
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env.test
          echo "GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}" >> .env.test
          echo "GOOGLE_CLIENT_SECRET=${{ vars.GOOGLE_CLIENT_SECRET }}" >> .env.test
          echo "EMAIL_HOST=${{ vars.EMAIL_HOST }}" >> .env.test
          echo "EMAIL_SMTP_PORT=${{ vars.EMAIL_SMTP_PORT }}" >> .env.test
          echo "EMAIL_HTTP_PORT=${{ vars.EMAIL_HTTP_PORT }}" >> .env.test
          echo "EMAIL_USER=${{ vars.EMAIL_USER }}" >> .env.test
          echo "EMAIL_PASSWORD=${{ vars.EMAIL_PASSWORD }}" >> .env.test
          echo "EMAIL_FROM_ADDRESS=${{ vars.EMAIL_FROM_ADDRESS }}" >> .env.test
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env.test
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env.test
          echo "REDIS_PASSWORD=${{ vars.REDIS_PASSWORD }}" >> .env.test
          echo "REDIS_MAX_MEMORY=${{ vars.REDIS_MAX_MEMORY }}" >> .env.test
          echo "SENTRY_DNS=${{ vars.SENTRY_DNS }}" >> .env.test

      # Print the contents of .env.test for debugging
      - name: Print .env.test
        run: cat .env.test

      # Buildx is an advanced Docker builder that supports multi-platform builds and caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Tests
        run: |
          docker compose --env-file .env.test --profile test up

      - name: Wait for Tests to Finish
        run: |
          docker wait app

      - name: Stop and Clean Up
        run: docker-compose down